#!/usr/bin/env python

# Copyright 2011 Gilt Groupe, INC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# System modules
import os
import sys
import cmdln
import datetime
import socket
import pprint # for printing dicts 

# Extra modules
import sqlalchemy
from pprint import pprint
import yaml

# Our modules
import mothership
import mothership.kv
import mothership.cobbler
import mothership.puppet
#import mothership.serverinfo
from mothership.serverinfo import ServerInfo
import mothership.mgmt_vlan
import mothership.dns
import mothership.users
import mothership.list_values
import mothership.zenoss
import mothership.ldap
from mothership.list_servers import *
from mothership.mothership_models import *
from mothership.configure import Configure
import mothership.zabbix

# for >=2.6 use json, >2.6 use simplejson
try:
    import json as myjson
except ImportError:
    import simplejson as myjson

si_methods = ""

def decorate_cmdln(names):
    aliases = []
    for i in names:
        aliases.append('cmdln.alias("'+i+'")')
    return aliases

class ShipCli(cmdln.Cmdln):
    def __init__(self, cfg):
        cmdln.Cmdln.__init__(self)
        self.cfg = cfg
        self.name = "ship"

        # attempting to auto-construct a command line. god help me.
        si = ServerInfo(cfg)
        global si_methods
        for k, v in si.metadata['methods'].iteritems(): # get functions from metadata
            si_method_list = []
            si_method_list.append(k)
            rargs = '' # clear args
            oargs = '' # clear args
            if si.metadata['methods'][k]['required_args']: # if there are required args, process first
                rargs = ', '.join(si.metadata['methods'][k]['required_args']) # just a string for now
                rargs = rargs+', ' # tack a , on at the end
            for k2, v2 in si.metadata['methods'][k]['optional_args']['args'].iteritems(): # process opt args
                oargs = oargs+k2+'=None, ' # just a string for now
            args = rargs + oargs # put both args together
        si_methods = si_method_list


    @cmdln.alias("si")
    def do_serverinfo(self, subcmd, opts):
        """${cmd_name}: get information about a server

        ${cmd_usage}
        ${cmd_option_list}
        """
        try:
            si = ServerInfo(cfg) # instantiate a serverinfo object, extends Configure
            host = 'mtest3'   # this is
            realm = 'satest'  # all just
            site_id = 'jfk'   # test data
            infos = si.get_host(hostname=host+'.'+realm+'.'+site_id)
            buff = {} # buffer to hold our ORMobject->dict/list translations
            tl = [] # temp list to hold list[ORMobject]->list[dict] translations
            # start translating
            for k, v in infos.iteritems(): #get keys and values from the infos dict
                if isinstance(v, list): # some values will be lists of objects (network, kv)
                     for l in v:
                         tl.append(l.to_dict()) # add the translated ORMobject->dict to temp list
                     buff[k] = tl # add the temp list to our buffer dict
                     tl = [] # clear the list so we don't end up with two of everything
                else:
                     buff[k] = v.to_dict() # if it's not a list, translate and add the dict to buffer
            print myjson.JSONEncoder(indent=4).encode(buff) # now that everything's translated to a dict/list[dict], print.
        except mothership.serverinfo.ServerInfoError, e:
            print 'Error: %s' % e
            sys.exit(1)


    @cmdln.alias("simeta")
    def do_get_serverinfo_metadata(self, subcmd, opts):
        """${cmd_name}: get the module's metadata 

        ${cmd_usage}
        ${cmd_option_list}
        """
        try:
            si = ServerInfo(cfg)
            print myjson.JSONEncoder(indent=4).encode(si.metadata)
        except mothership.serverinfo.ServerInfoError, e:
            print 'Error: %s' % e
            sys.exit(1)

    
    @decorate_cmdln(si_methods) # does not work. is the suck.
    def do_automatic_command_line(self, subcmd, opts):
        """${cmd_name}: testing out automatic command line generation

        ${cmd_usage}
        ${cmd_option_list}
        """
        try:
            si = ServerInfo(cfg)
            funct = getattr(si, si.metadata['methods'][sys.argv[1]]['call'])
            infos = funct(hostname='mtest3.satest.jfk')
            buff = {} # buffer to hold our ORMobject->dict/list translations
            tl = [] # temp list to hold list[ORMobject]->list[dict] translations
            # start translating
            for k, v in infos.iteritems(): #get keys and values from the infos dict
                if isinstance(v, list): # some values will be lists of objects (network, kv)
                     for l in v:
                         tl.append(l.to_dict()) # add the translated ORMobject->dict to temp list
                     buff[k] = tl # add the temp list to our buffer dict
                     tl = [] # clear the list so we don't end up with two of everything
                else:
                     buff[k] = v.to_dict() # if it's not a list, translate and add the dict to buffer
            print myjson.JSONEncoder(indent=4).encode(buff)
        except mothership.serverinfo.ServerInfoError, e:
            print "Error: %s" % e
            sys.exit(1)

if __name__ == "__main__":
    # the global config. useful everywhere
    cfgfile = 'mothership.yaml'
    cfg = Configure(cfgfile)

    # useful global values
    today = datetime.date.today()

    try:
        ship = ShipCli(cfg)
        retval = ship.main()
        # Properly close DB connection
        cfg.close_connections()
        sys.exit(retval)
    except IOError:
        print "Missing file named %s" % cfgfile
        sys.exit(1)
